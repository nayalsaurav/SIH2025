// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role{
  FARMER
  COLLECTOR
  LAB
  MANUFACTURER
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  role          Role
  mspId         String? 
  sessions      Session[]
  accounts      Account[]
  // Traceability relations
  events        Event[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}


model Batch {
  id          String       @id @default(uuid())
  productName String
  species     String
  qrToken     String       @unique
  status      BatchStatus  @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  events      Event[]
  scans       ConsumerScan[]
}

enum BatchStatus {
  ACTIVE
  REJECTED
  RECALLED
  COMPLETED
}

model Event {
  id          String     @id @default(uuid())
  eventType   EventType
  batchId     String?
  userId      String
  payloadUrl  String?   // Off-chain storage
  payloadHash String
  metadata    Json
  txId        String?   // Blockchain transaction
  createdAt   DateTime  @default(now())

  Batch       Batch?    @relation(fields: [batchId], references: [id])
  User        User      @relation(fields: [userId], references: [id])
  documents   Document[]
}

enum EventType {
  COLLECTION
  QUALITY_TEST
  FORMULATION
}

model Document {
  id        String   @id @default(uuid())
  eventId   String
  url       String
  hash      String
  type      String
  createdAt DateTime @default(now())

  Event     Event    @relation(fields: [eventId], references: [id])
}

model ConsumerScan {
  id        String   @id @default(uuid())
  batchId   String
  scannedAt DateTime @default(now())
  device    String?
  location  Json?

  Batch     Batch    @relation(fields: [batchId], references: [id])
}